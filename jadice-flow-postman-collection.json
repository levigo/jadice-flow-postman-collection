{
	"info": {
		"_postman_id": "98bad1d6-6308-4d44-ad93-3572016dbd63",
		"name": "jadice-flow",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "8089295"
	},
	"item": [
		{
			"name": "health check",
			"item": [
				{
					"name": "director health check",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{JS_DIRECTOR_URL}}/actuator/health",
							"host": [
								"{{JS_DIRECTOR_URL}}"
							],
							"path": [
								"actuator",
								"health"
							]
						}
					},
					"response": []
				},
				{
					"name": "director info",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{JS_DIRECTOR_URL}}/actuator/info",
							"host": [
								"{{JS_DIRECTOR_URL}}"
							],
							"path": [
								"actuator",
								"info"
							]
						}
					},
					"response": []
				},
				{
					"name": "director prometheus",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{JS_DIRECTOR_URL}}/actuator/prometheus",
							"host": [
								"{{JS_DIRECTOR_URL}}"
							],
							"path": [
								"actuator",
								"prometheus"
							]
						}
					},
					"response": []
				},
				{
					"name": "worker health check",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{JS_Worker_URL}}/actuator/health",
							"host": [
								"{{JS_Worker_URL}}"
							],
							"path": [
								"actuator",
								"health"
							]
						}
					},
					"response": []
				},
				{
					"name": "worker prometheus",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{JS_Worker_URL}}/actuator/prometheus",
							"host": [
								"{{JS_Worker_URL}}"
							],
							"path": [
								"actuator",
								"prometheus"
							]
						}
					},
					"response": []
				},
				{
					"name": "worker info",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{JS_Worker_URL}}/actuator/info",
							"host": [
								"{{JS_Worker_URL}}"
							],
							"path": [
								"actuator",
								"info"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "director",
			"item": [
				{
					"name": "jobs pending",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{JS_DIRECTOR_URL}}/v1/engine/job/pending/count",
							"host": [
								"{{JS_DIRECTOR_URL}}"
							],
							"path": [
								"v1",
								"engine",
								"job",
								"pending",
								"count"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "ocr-bundle",
			"item": [
				{
					"name": "director health check",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function(){\r",
									"    pm.response.to.have.status(200);\r",
									"}\r",
									");\r",
									"\r",
									"pm.test('All services are up and running', () => {\r",
									"    pm.expect(pm.response.text()).to.not.include(\"down\");\r",
									"})\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{JS_DIRECTOR_URL}}/actuator/health",
							"host": [
								"{{JS_DIRECTOR_URL}}"
							],
							"path": [
								"actuator",
								"health"
							]
						}
					},
					"response": []
				},
				{
					"name": "worker job-types info",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function(){",
									"    pm.response.to.have.status(200);",
									"}",
									");",
									"",
									"pm.test('OCR-worker is listed as registered', () => {",
									"    pm.expect(pm.response.text()).to.include(\"jf-single:ocr\");",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/pdf"
							}
						],
						"url": {
							"raw": "{{JS_DIRECTOR_URL}}/v1/engine/job-types",
							"host": [
								"{{JS_DIRECTOR_URL}}"
							],
							"path": [
								"v1",
								"engine",
								"job-types"
							]
						}
					},
					"response": []
				},
				{
					"name": "worker job-types ocr",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function(){",
									"    pm.response.to.have.status(200);",
									"}",
									");",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/pdf"
							}
						],
						"url": {
							"raw": "{{JS_DIRECTOR_URL}}/v1/engine/job-types/jf-single:ocr",
							"host": [
								"{{JS_DIRECTOR_URL}}"
							],
							"path": [
								"v1",
								"engine",
								"job-types",
								"jf-single:ocr"
							]
						}
					},
					"response": []
				},
				{
					"name": "start Job ocr < PDF dummy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function(){\r",
									"    pm.response.to.have.status(200);\r",
									"    \r",
									"    let jsonData = pm.response.json();\r",
									"    let jobId = jsonData.jobId;\r",
									"\r",
									"    pm.collectionVariables.set(\"jobId\", jobId);\r",
									"    console.log(\"JobID: \" + jobId)\r",
									"}\r",
									");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n \"source\" : [ {\n   \"uri\" : \"https://www.w3.org/WAI/ER/tests/xhtml/testfiles/resources/pdf/dummy.pdf\",\n   \"descriptor\" : {\n     \"mimeType\" : \"application/pdf\",\n     \"semanticType\" : null,\n     \"description\" : null,\n     \"fileName\" : \"dummy.pdf\",\n     \"id\" : null,\n     \"properties\" : {\"content-language\": \"deu\", \"page-segmentation-mode\": \"3\"},\n     \"parent\" : null\n   }\n } ],\n \"configuration\" : {\"output-formats\": \"text\" }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{JS_DIRECTOR_URL}}/v1/engine/job/jf-single:ocr",
							"host": [
								"{{JS_DIRECTOR_URL}}"
							],
							"path": [
								"v1",
								"engine",
								"job",
								"jf-single:ocr"
							]
						}
					},
					"response": []
				},
				{
					"name": "job state",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function(){\r",
									"    pm.response.to.have.status(200);\r",
									"}\r",
									");\r",
									"\r",
									"const sleepBetweenTries = 5000;\r",
									"\r",
									"pm.test('The request is currently being processed or has been successfully completed', () => {\r",
									"    console.log(\"Response: \" + pm.response.text());\r",
									"    if(!['FAILED', 'FINISHED'].find(e => pm.response.text().includes(e)) && pm.response.code < \"300\"){        \r",
									"        setTimeout(function() {\r",
									"            postman.setNextRequest(request.name);\r",
									"        }, sleepBetweenTries);\r",
									"    }else if(pm.expect(pm.response.text()).to.include('FINISHED')){\r",
									"    }\r",
									"})"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let jobId = pm.collectionVariables.get(\"jobId\");\r",
									"\r",
									"if (jobId != null){\r",
									"    pm.environment.set(\"jobId\", jobId);\r",
									"} else (pm.environment.set(\"jobId\", 23));\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{JS_DIRECTOR_URL}}/v1/engine/job/:jobId/state",
							"host": [
								"{{JS_DIRECTOR_URL}}"
							],
							"path": [
								"v1",
								"engine",
								"job",
								":jobId",
								"state"
							],
							"variable": [
								{
									"key": "jobId",
									"value": "{{jobId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "job result",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function(){\r",
									"    if(pm.response.code != \"200\"){\r",
									"        console.log(\"Response: \" + pm.response.text());\r",
									"    }\r",
									"    pm.response.to.have.status(200);\r",
									"}\r",
									");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let jobId = pm.collectionVariables.get(\"jobId\");\r",
									"\r",
									"if (jobId != null){\r",
									"    pm.environment.set(\"jobId\", jobId);\r",
									"} else (pm.environment.set(\"jobId\", 3));\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"url": {
							"raw": "{{JS_DIRECTOR_URL}}/v1/engine/job/:jobId/result",
							"host": [
								"{{JS_DIRECTOR_URL}}"
							],
							"path": [
								"v1",
								"engine",
								"job",
								":jobId",
								"result"
							],
							"variable": [
								{
									"key": "jobId",
									"value": "{{jobId}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "email-bundle",
			"item": [
				{
					"name": "director health check",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function(){\r",
									"    pm.response.to.have.status(200);\r",
									"}\r",
									");\r",
									"\r",
									"pm.test('All services are up and running', () => {\r",
									"    pm.expect(pm.response.text()).to.not.include(\"down\");\r",
									"})\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{JS_DIRECTOR_URL}}/actuator/health",
							"host": [
								"{{JS_DIRECTOR_URL}}"
							],
							"path": [
								"actuator",
								"health"
							]
						}
					},
					"response": []
				},
				{
					"name": "worker job-types info",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function(){",
									"    pm.response.to.have.status(200);",
									"}",
									");",
									"",
									"pm.test('emaildisassembly-worker is listed as registered', () => {",
									"    pm.expect(pm.response.text()).to.include(\"jf-single:emaildisassembly\");",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/pdf"
							}
						],
						"url": {
							"raw": "{{JS_DIRECTOR_URL}}/v1/engine/job-types",
							"host": [
								"{{JS_DIRECTOR_URL}}"
							],
							"path": [
								"v1",
								"engine",
								"job-types"
							]
						}
					},
					"response": []
				},
				{
					"name": "worker job-types emaildisassembly",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function(){",
									"    pm.response.to.have.status(200);",
									"}",
									");",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/pdf"
							}
						],
						"url": {
							"raw": "{{JS_DIRECTOR_URL}}/v1/engine/job-types/jf-single:emaildisassembly",
							"host": [
								"{{JS_DIRECTOR_URL}}"
							],
							"path": [
								"v1",
								"engine",
								"job-types",
								"jf-single:emaildisassembly"
							]
						}
					},
					"response": []
				},
				{
					"name": "worker job-types totiff",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function(){",
									"    pm.response.to.have.status(200);",
									"}",
									");",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/pdf"
							}
						],
						"url": {
							"raw": "{{JS_DIRECTOR_URL}}/v1/engine/job-types/jf-single:totiff",
							"host": [
								"{{JS_DIRECTOR_URL}}"
							],
							"path": [
								"v1",
								"engine",
								"job-types",
								"jf-single:totiff"
							]
						}
					},
					"response": []
				},
				{
					"name": "env - start job toTiff Copy",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function(){\r",
									"    pm.response.to.have.status(200);\r",
									"    \r",
									"    let jsonData = pm.response.json();\r",
									"    let jobId = jsonData.jobId;\r",
									"\r",
									"    pm.collectionVariables.set(\"jobId\", jobId);\r",
									"    console.log(jobId)\r",
									"}\r",
									");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n \"source\" : [ {\n   \"uri\" : \"https://www.w3.org/WAI/ER/tests/xhtml/testfiles/resources/pdf/dummy.pdf\",\n   \"descriptor\" : {\n     \"mimeType\" : \"application/pdf\",\n     \"semanticType\" : null,\n     \"description\" : null,\n     \"fileName\" : null,\n     \"id\" : null,\n     \"properties\" : { },\n     \"parent\" : null\n   }\n } ],\n \"configuration\" : null\n}"
						},
						"url": {
							"raw": "{{JS_DIRECTOR_URL}}/v1/engine/job/jf-single:totiff",
							"host": [
								"{{JS_DIRECTOR_URL}}"
							],
							"path": [
								"v1",
								"engine",
								"job",
								"jf-single:totiff"
							]
						}
					},
					"response": []
				},
				{
					"name": "job state",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function(){\r",
									"    pm.response.to.have.status(200);\r",
									"}\r",
									");\r",
									"\r",
									"const sleepBetweenTries = 5000;\r",
									"\r",
									"pm.test('The requested job has the status finished', () => {\r",
									"    if(!['FAILED', 'FINISHED'].find(e => pm.response.text().includes(e))){        \r",
									"        setTimeout(function() {\r",
									"            postman.setNextRequest(request.name);\r",
									"        }, sleepBetweenTries);\r",
									"        pm.expect(pm.response.text()).to.be.a('FAILED or FINISHED');\r",
									"    }else if(pm.expect(pm.response.text()).to.include('FINISHED')){\r",
									"    }\r",
									"})"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let jobId = pm.collectionVariables.get(\"jobId\");\r",
									"\r",
									"if (jobId != null){\r",
									"    pm.environment.set(\"jobId\", jobId);\r",
									"} else (pm.environment.set(\"jobId\", 1));\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{JS_DIRECTOR_URL}}/v1/engine/job/:jobId/state",
							"host": [
								"{{JS_DIRECTOR_URL}}"
							],
							"path": [
								"v1",
								"engine",
								"job",
								":jobId",
								"state"
							],
							"variable": [
								{
									"key": "jobId",
									"value": "{{jobId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "job result",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function(){\r",
									"    pm.response.to.have.status(200);\r",
									"}\r",
									");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let jobId = pm.collectionVariables.get(\"jobId\");\r",
									"\r",
									"if (jobId != null){\r",
									"    pm.environment.set(\"jobId\", jobId);\r",
									"} else (pm.environment.set(\"jobId\", 1));\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"url": {
							"raw": "{{JS_DIRECTOR_URL}}/v1/engine/job/:jobId/result",
							"host": [
								"{{JS_DIRECTOR_URL}}"
							],
							"path": [
								"v1",
								"engine",
								"job",
								":jobId",
								"result"
							],
							"variable": [
								{
									"key": "jobId",
									"value": "{{jobId}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Add OCR-Worker",
			"item": [
				{
					"name": "register_ocr_worker",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function(){\r",
									"    pm.response.to.have.status(204);\r",
									"}\r",
									");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/pdf",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"type\":\"ocr\",\r\n\"uri\": \"http://jf-worker-ocr\",\r\n\"displayName\": \"Tesseract_OCR\",\r\n\"description\": \"This worker performs OCR analysis and can return text, PDF, and hOCR.\",\r\n\"executors\": 2\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{JS_DIRECTOR_URL}}/v1/registry/job-type",
							"host": [
								"{{JS_DIRECTOR_URL}}"
							],
							"path": [
								"v1",
								"registry",
								"job-type"
							]
						}
					},
					"response": []
				},
				{
					"name": "worker job-types info Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function(){",
									"    pm.response.to.have.status(200);",
									"}",
									");",
									"",
									"pm.test('OCR-worker is listed as registered', () => {",
									"    pm.expect(pm.response.text()).to.include(\"jf-single:ocr\");",
									"})",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/pdf"
							}
						],
						"url": {
							"raw": "{{JS_DIRECTOR_URL}}/v1/engine/job-types",
							"host": [
								"{{JS_DIRECTOR_URL}}"
							],
							"path": [
								"v1",
								"engine",
								"job-types"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{JADICE-SERVER-ACCESS-TOKEN}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "serverPort",
			"value": "8090"
		},
		{
			"key": "DUMMY_PDF_URL",
			"value": "https://www.w3.org/WAI/ER/tests/xhtml/testfiles/resources/pdf/dummy.pdf"
		},
		{
			"key": "jobId",
			"value": ""
		}
	]
}
